{
  "name": "[API] Ingestion & Indexing (Corrected)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ingest",
        "responseMode": "responseNode",
        "options": {
          "binaryPropertyName": "file"
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        480,
        320
      ],
      "id": "a208afba-5a15-4876-9b22-39f6cadc1f3e",
      "name": "Webhook"
    },
    {
      "parameters": {
        "source": "parameter",
        "workflowId": "y9QzA01EeiDHuAyi",
        "workflowJson": "={{\n  {\n    \"source_workflow\": \"Ingestion & Indexing\",\n    \"step_name\": \"Initiation\",\n    \"status\": \"started\",\n    \"message\": \"Ingestion process started.\"\n  }\n}}",
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        720,
        320
      ],
      "id": "1921fbe6-18a4-45f8-874b-0c35a8a584d8",
      "name": "Log: Start"
    },
    {
      "parameters": {
        "conditions": {
          "options": {},
          "conditions": [
            {
              "id": "60ea87cb-4b16-4750-801f-eedb11d52169",
              "leftValue": "={{ $binary.data }}",
              "operator": {
                "type": "object",
                "operation": "exists"
              }
            },
            {
              "id": "ebd2cc8e-6a42-4d8a-9595-91c0e4e329ae",
              "leftValue": "={{ $json.body.url }}",
              "operator": {
                "type": "string",
                "operation": "exists"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        920,
        320
      ],
      "id": "3f7e05f8-de52-4ea7-aa5e-6c57c77c70fb",
      "name": "If Router"
    },
    {
      "parameters": {
        "operation": "Upload File to PDF.co",
        "binaryData": true,
        "binaryPropertyName": "data"
      },
      "type": "n8n-nodes-pdfco.PDFcoApi",
      "typeVersion": 1,
      "position": [
        1120,
        120
      ],
      "id": "790f3ad8-1a43-4a2c-8915-522b9fc53101",
      "name": "1. Upload PDF",
      "credentials": {
        "pdfcoApi": {
          "id": "3Sr0ELrDDsCeHqxJ",
          "name": "PDF.co account"
        }
      }
    },
    {
      "parameters": {
        "operation": "Convert from PDF",
        "url": "={{ $json.url }}",
        "options": {
          "convertType": "PDF to Text"
        }
      },
      "type": "n8n-nodes-pdfco.PDFcoApi",
      "typeVersion": 1,
      "position": [
        1320,
        120
      ],
      "id": "30b44ad7-f23d-4a1e-9705-01100c8652c4",
      "name": "2. Convert PDF to Text",
      "credentials": {
        "pdfcoApi": {
          "id": "3Sr0ELrDDsCeHqxJ",
          "name": "PDF.co account"
        }
      }
    },
    {
      "parameters": {
        "source": "parameter",
        "workflowId": "y9QzA01EeiDHuAyi",
        "workflowJson": "={{\n  {\n    \"source_workflow\": \"Ingestion & Indexing\",\n    \"step_name\": \"Extract Content (PDF)\",\n    \"status\": \"completed\",\n    \"message\": \"Successfully extracted text from PDF.\"\n  }\n}}",
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1520,
        120
      ],
      "id": "d0f88e7b-402a-4c22-959c-6a0662d0016e",
      "name": "3. Log PDF Extracted"
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "content",
              "value": "={{ $json.body }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 2.2,
      "position": [
        1720,
        120
      ],
      "id": "c1f7a26f-d316-410c-99f6-11f81e3a1f14",
      "name": "4. Set PDF Content"
    },
    {
      "parameters": {
        "url": "={{ $json.body.url }}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2.2,
      "position": [
        1120,
        320
      ],
      "id": "b3f07a11-665e-49b0-9b41-b0e27104b77e",
      "name": "1. Scrape Webpage"
    },
    {
      "parameters": {
        "source": "parameter",
        "workflowId": "y9QzA01EeiDHuAyi",
        "workflowJson": "={{\n  {\n    \"source_workflow\": \"Ingestion & Indexing\",\n    \"step_name\": \"Extract Content (URL)\",\n    \"status\": \"completed\",\n    \"message\": \"Successfully scraped content from URL.\"\n  }\n}}",
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1320,
        320
      ],
      "id": "a9a304e2-632b-4276-857e-07a8a1c93a03",
      "name": "2. Log URL Scraped"
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "content",
              "value": "={{ $json.body }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 2.2,
      "position": [
        1520,
        320
      ],
      "id": "d1e7c57b-3d6d-4787-ac55-d6d75d319e74",
      "name": "3. Set URL Content"
    },
    {
      "parameters": {
        "source": "parameter",
        "workflowId": "y9QzA01EeiDHuAyi",
        "workflowJson": "={{\n  {\n    \"source_workflow\": \"Ingestion & Indexing\",\n    \"step_name\": \"Extract Content (Text)\",\n    \"status\": \"completed\",\n    \"message\": \"Successfully received plain text note.\"\n  }\n}}",
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1120,
        520
      ],
      "id": "1921fbe6-18a4-45f8-874b-0c35a8a584d9",
      "name": "1. Log Text Received"
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "content",
              "value": "={{ $json.body.note }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 2.2,
      "position": [
        1320,
        520
      ],
      "id": "f5e9333b-8524-49c0-9d51-60a5e8c20537",
      "name": "2. Set Text Content"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        1920,
        320
      ],
      "id": "a5e8f3d1-d245-4229-87c2-747309990b4d",
      "name": "Merge"
    },
    {
      "parameters": {
        "operation": "noOp",
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 2,
      "position": [
        2120,
        320
      ],
      "id": "b1b5e39a-7a13-40f4-9040-025a1762c2f6",
      "name": "Split into 2"
    },
    {
      "parameters": {
        "url": "http://ollama:11434/api/generate",
        "options": {
          "bodyContentType": "json",
          "bodyParameters": {
            "parameters": [
              {
                "name": "model",
                "value": "gemma:2b"
              },
              {
                "name": "stream",
                "value": "={{false}}"
              },
              {
                "name": "prompt",
                "value": "Generate a concise title and a brief one-sentence summary for the following text. Respond in JSON format with two keys: \"title\" and \"summary\".\n\nText: {{ $json.content.substring(0, 2000) }}"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2.2,
      "position": [
        2320,
        220
      ],
      "id": "e30e6a39-c1f9-4b6e-85c1-17730d1d227b",
      "name": "Ollama: Get Metadata"
    },
    {
      "parameters": {
        "url": "http://ollama:11434/api/embeddings",
        "options": {
          "bodyContentType": "json",
          "bodyParameters": {
            "parameters": [
              {
                "name": "model",
                "value": "mxbai-embed-large"
              },
              {
                "name": "prompt",
                "value": "={{ $json.content }}"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2.2,
      "position": [
        2320,
        420
      ],
      "id": "f22f7413-7d2d-4176-bb50-10113c23e80e",
      "name": "Ollama: Get Embedding"
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "title",
              "value": "={{ JSON.parse($node[\"Ollama: Get Metadata\"].json.response).title }}"
            },
            {
              "name": "summary",
              "value": "={{ JSON.parse($node[\"Ollama: Get Metadata\"].json.response).summary }}"
            },
            {
              "name": "vector",
              "value": "={{ $node[\"Ollama: Get Embedding\"].json.embedding }}"
            }
          ]
        },
        "options": {
          "keepOnlySet": false
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 2.2,
      "position": [
        2560,
        320
      ],
      "id": "c1f7a26f-d316-410c-99f6-11f81e3a1f13",
      "name": "Combine AI Results"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO notes (title, summary, content, vector)\nVALUES ($1, $2, $3, $4)\nRETURNING *;",
        "options": {
          "preparedStatements": true,
          "queryParameters": {
            "parameters": [
              {
                "value": "={{ $json.title }}"
              },
              {
                "value": "={{ $json.summary }}"
              },
              {
                "value": "={{ $json.content }}"
              },
              {
                "value": "={{ JSON.stringify($json.vector) }}"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2780,
        320
      ],
      "id": "e0c4a4e1-23f2-45e0-94d8-c7a6e127394c",
      "name": "Save to Postgres",
      "credentials": {
        "postgres": {
          "id": "NKxdhJobYtXb7TaZ",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        3000,
        320
      ],
      "id": "f04c6439-6617-48f0-b976-13a8f465c49b",
      "name": "Respond to Webhook"
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Log: Start",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Start": {
      "main": [
        [
          {
            "node": "If Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Router": {
      "main": [
        [
          {
            "node": "1. Upload PDF",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "1. Scrape Webpage",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "1. Log Text Received",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1. Upload PDF": {
      "main": [
        [
          {
            "node": "2. Convert PDF to Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "2. Convert PDF to Text": {
      "main": [
        [
          {
            "node": "3. Log PDF Extracted",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "3. Log PDF Extracted": {
      "main": [
        [
          {
            "node": "4. Set PDF Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4. Set PDF Content": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1. Scrape Webpage": {
      "main": [
        [
          {
            "node": "2. Log URL Scraped",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "2. Log URL Scraped": {
      "main": [
        [
          {
            "node": "3. Set URL Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "3. Set URL Content": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "1. Log Text Received": {
      "main": [
        [
          {
            "node": "2. Set Text Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "2. Set Text Content": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Split into 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split into 2": {
      "main": [
        [
          {
            "node": "Ollama: Get Metadata",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Ollama: Get Embedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ollama: Get Metadata": {
      "main": [
        [
          {
            "node": "Combine AI Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine AI Results": {
      "main": [
        [
          {
            "node": "Save to Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Postgres": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true
  }
}